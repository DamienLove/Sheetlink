{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/FileUpload.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ChangeEvent } from 'react';\nimport { useState } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Upload } from 'lucide-react';\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { RawSpreadsheetData, ParsedSpreadsheetData } from '@/types';\n\ninterface FileUploadProps {\n  onFileProcessed: (data: { rawData: RawSpreadsheetData, parsedData: ParsedSpreadsheetData, headers: string[] }) => void;\n  isLoading: boolean;\n  setIsLoading: (loading: boolean) => void;\n}\n\nexport function FileUpload({ onFileProcessed, isLoading, setIsLoading }: FileUploadProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const { toast } = useToast();\n\n  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      if (file.name.endsWith('.csv') || file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {\n        setSelectedFile(file);\n      } else {\n        toast({\n          title: \"Unsupported File Type\",\n          description: \"Please upload a CSV, XLSX, or XLS file.\",\n          variant: \"destructive\",\n        });\n        setSelectedFile(null);\n        event.target.value = \"\"; // Reset file input\n      }\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      toast({\n        title: \"No File Selected\",\n        description: \"Please select a spreadsheet file to upload.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      // Dynamically import parser to keep initial bundle small\n      const { parseSpreadsheetFile } = await import('@/lib/spreadsheet-parser');\n      const processedData = await parseSpreadsheetFile(selectedFile);\n      onFileProcessed(processedData);\n      toast({\n        title: \"File Processed\",\n        description: `${selectedFile.name} has been successfully processed.`,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Processing Error\",\n        description: error.message || \"An unknown error occurred during file processing.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-xl\">\n          <Upload className=\"h-6 w-6 text-primary\" />\n          Upload Spreadsheet\n        </CardTitle>\n        <CardDescription>Select a CSV or XLSX file to import.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Input\n          type=\"file\"\n          accept=\".csv,.xlsx,.xls\"\n          onChange={handleFileChange}\n          disabled={isLoading}\n          className=\"file:text-primary file:font-semibold\"\n        />\n        <Button onClick={handleUpload} disabled={isLoading || !selectedFile} className=\"w-full\">\n          {isLoading ? 'Processing...' : 'Upload and Process File'}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Need to import Card components from shadcn\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AAsFA,6CAA6C;AAC7C;AA9FA;;;;;;;AAgBO,SAAS,WAAW,EAAE,eAAe,EAAE,SAAS,EAAE,YAAY,EAAmB;IACtF,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC9D,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IAEzB,MAAM,mBAAmB,CAAC;QACxB,IAAI,MAAM,MAAM,CAAC,KAAK,IAAI,MAAM,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE;YAC/C,MAAM,OAAO,MAAM,MAAM,CAAC,KAAK,CAAC,EAAE;YAClC,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,IAAI,CAAC,QAAQ,CAAC,YAAY,KAAK,IAAI,CAAC,QAAQ,CAAC,SAAS;gBAC3F,gBAAgB;YAClB,OAAO;gBACL,MAAM;oBACJ,OAAO;oBACP,aAAa;oBACb,SAAS;gBACX;gBACA,gBAAgB;gBAChB,MAAM,MAAM,CAAC,KAAK,GAAG,IAAI,mBAAmB;YAC9C;QACF;IACF;IAEA,MAAM,eAAe;QACnB,IAAI,CAAC,cAAc;YACjB,MAAM;gBACJ,OAAO;gBACP,aAAa;gBACb,SAAS;YACX;YACA;QACF;QAEA,aAAa;QACb,IAAI;YACF,yDAAyD;YACzD,MAAM,EAAE,oBAAoB,EAAE,GAAG;YACjC,MAAM,gBAAgB,MAAM,qBAAqB;YACjD,gBAAgB;YAChB,MAAM;gBACJ,OAAO;gBACP,aAAa,GAAG,aAAa,IAAI,CAAC,iCAAiC,CAAC;YACtE;QACF,EAAE,OAAO,OAAY;YACnB,MAAM;gBACJ,OAAO;gBACP,aAAa,MAAM,OAAO,IAAI;gBAC9B,SAAS;YACX;QACF,SAAU;YACR,aAAa;QACf;IACF;IAEA,qBACE,8OAAC,gIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,8OAAC,gIAAA,CAAA,aAAU;;kCACT,8OAAC,gIAAA,CAAA,YAAS;wBAAC,WAAU;;0CACnB,8OAAC,sMAAA,CAAA,SAAM;gCAAC,WAAU;;;;;;4BAAyB;;;;;;;kCAG7C,8OAAC,gIAAA,CAAA,kBAAe;kCAAC;;;;;;;;;;;;0BAEnB,8OAAC,gIAAA,CAAA,cAAW;gBAAC,WAAU;;kCACrB,8OAAC,iIAAA,CAAA,QAAK;wBACJ,MAAK;wBACL,QAAO;wBACP,UAAU;wBACV,UAAU;wBACV,WAAU;;;;;;kCAEZ,8OAAC,kIAAA,CAAA,SAAM;wBAAC,SAAS;wBAAc,UAAU,aAAa,CAAC;wBAAc,WAAU;kCAC5E,YAAY,kBAAkB;;;;;;;;;;;;;;;;;;AAKzC","debugId":null}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 432, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,0KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,8OAAC,0KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,8OAAC;;;;;0BACD,8OAAC,0KAAA,CAAA,SAA0B;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,8OAAC,0KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,0KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;AAGnD,UAAU,WAAW,GAAG,0KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 500, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/radio-group.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,8OAAC,0KAAA,CAAA,OAAwB;QACvB,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;QAC3B,GAAG,KAAK;QACT,KAAK;;;;;;AAGX;AACA,WAAW,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,+BAAiB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGpC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,8OAAC,0KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4OACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,0KAAA,CAAA,YAA6B;YAAC,WAAU;sBACvC,cAAA,8OAAC,sMAAA,CAAA,SAAM;gBAAC,WAAU;;;;;;;;;;;;;;;;AAI1B;AACA,eAAe,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 560, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 592, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/SpreadsheetDisplay.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useMemo, useEffect } from 'react';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckSquare, Grid, Rows } from 'lucide-react';\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { RawSpreadsheetData, ParsedSpreadsheetData, SpreadsheetRowObject, SpreadsheetCell } from '@/types';\nimport { useToast } from \"@/hooks/use-toast\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface SpreadsheetDisplayProps {\n  rawData: RawSpreadsheetData;\n  parsedData: ParsedSpreadsheetData;\n  headers: string[];\n  onRowSelectForForm: (rowData: SpreadsheetRowObject) => void;\n  onCellsSelectForKeyboard: (cells: string[]) => void;\n}\n\nconst MAX_DISPLAY_ROWS = 100; // Performance optimization for large sheets\n\ntype CellSelectionMethod = 'single' | 'block';\n\nexport function SpreadsheetDisplay({ rawData, parsedData, headers, onRowSelectForForm, onCellsSelectForKeyboard }: SpreadsheetDisplayProps) {\n  const [isKeyboardSelectionMode, setIsKeyboardSelectionMode] = useState(false);\n  const [keyboardCellSelectionMethod, setKeyboardCellSelectionMethod] = useState<CellSelectionMethod>('block');\n  \n  const [blockSelectionStartCell, setBlockSelectionStartCell] = useState<{rowIndex: number, colIndex: number} | null>(null);\n  const [blockSelectionHoverCell, setBlockSelectionHoverCell] = useState<{rowIndex: number, colIndex: number} | null>(null);\n  const [currentSelectedBlockCoords, setCurrentSelectedBlockCoords] = useState<{minRow: number, maxRow: number, minCol: number, maxCol: number} | null>(null);\n  \n  const [selectedCellValuesForKeyboard, setSelectedCellValuesForKeyboard] = useState<string[]>([]);\n  const { toast } = useToast();\n\n  const displayData = useMemo(() => rawData.slice(1, MAX_DISPLAY_ROWS + 1), [rawData]); // Skip header row, limit rows\n\n  // Reset selection states when selection method changes\n  useEffect(() => {\n    setSelectedCellValuesForKeyboard([]);\n    setBlockSelectionStartCell(null);\n    setBlockSelectionHoverCell(null);\n    setCurrentSelectedBlockCoords(null);\n  }, [keyboardCellSelectionMethod]);\n\n  const toggleKeyboardSelectionMode = () => {\n    const newModeActive = !isKeyboardSelectionMode;\n    setIsKeyboardSelectionMode(newModeActive);\n    \n    // Reset all selection-related state\n    setSelectedCellValuesForKeyboard([]);\n    setBlockSelectionStartCell(null);\n    setBlockSelectionHoverCell(null);\n    setCurrentSelectedBlockCoords(null);\n\n    if (newModeActive) {\n      setKeyboardCellSelectionMethod('block'); // Default to block select when entering mode\n    }\n  };\n\n  const updateSelectedValuesFromCoords = (coords: {minRow: number, maxRow: number, minCol: number, maxCol: number} | null) => {\n    if (!coords) {\n      setSelectedCellValuesForKeyboard([]);\n      return;\n    }\n    const newValues: string[] = [];\n    for (let r = coords.minRow; r <= coords.maxRow; r++) {\n      for (let c = coords.minCol; c <= coords.maxCol; c++) {\n        if (displayData[r] && displayData[r][c] !== undefined) {\n          newValues.push(String(displayData[r][c]));\n        }\n      }\n    }\n    setSelectedCellValuesForKeyboard(newValues);\n  };\n\n  const handleCellClick = (rowIndex: number, colIndex: number) => {\n    if (!isKeyboardSelectionMode) return;\n\n    const cellValue = String(displayData[rowIndex][colIndex]);\n\n    if (keyboardCellSelectionMethod === 'single') {\n      setSelectedCellValuesForKeyboard(prev =>\n        prev.includes(cellValue) ? prev.filter(c => c !== cellValue) : [...prev, cellValue]\n      );\n    } else { // Block selection mode\n      if (!blockSelectionStartCell) {\n        // First click: set start cell\n        setBlockSelectionStartCell({ rowIndex, colIndex });\n        const newCoords = { minRow: rowIndex, maxRow: rowIndex, minCol: colIndex, maxCol: colIndex };\n        setCurrentSelectedBlockCoords(newCoords);\n        updateSelectedValuesFromCoords(newCoords);\n        setBlockSelectionHoverCell(null);\n      } else {\n        // Second click: finalize block\n        const start = blockSelectionStartCell;\n        const end = { rowIndex, colIndex };\n        \n        const minRow = Math.min(start.rowIndex, end.rowIndex);\n        const maxRow = Math.max(start.rowIndex, end.rowIndex);\n        const minCol = Math.min(start.colIndex, end.colIndex);\n        const maxCol = Math.max(start.colIndex, end.colIndex);\n        \n        const finalCoords = { minRow, maxRow, minCol, maxCol };\n        setCurrentSelectedBlockCoords(finalCoords);\n        updateSelectedValuesFromCoords(finalCoords);\n        \n        setBlockSelectionStartCell(null); // Reset for next selection or confirm\n        setBlockSelectionHoverCell(null);\n      }\n    }\n  };\n\n  const handleCellMouseEnter = (rowIndex: number, colIndex: number) => {\n    if (isKeyboardSelectionMode && keyboardCellSelectionMethod === 'block' && blockSelectionStartCell) {\n      setBlockSelectionHoverCell({ rowIndex, colIndex });\n      const start = blockSelectionStartCell;\n      const hover = { rowIndex, colIndex };\n      \n      const minRow = Math.min(start.rowIndex, hover.rowIndex);\n      const maxRow = Math.max(start.rowIndex, hover.rowIndex);\n      const minCol = Math.min(start.colIndex, hover.colIndex);\n      const maxCol = Math.max(start.colIndex, hover.colIndex);\n      \n      const hoverCoords = { minRow, maxRow, minCol, maxCol };\n      setCurrentSelectedBlockCoords(hoverCoords);\n      updateSelectedValuesFromCoords(hoverCoords);\n    }\n  };\n\n  const handleCellMouseLeave = () => {\n    if (isKeyboardSelectionMode && keyboardCellSelectionMethod === 'block' && blockSelectionStartCell && blockSelectionHoverCell) {\n       // When mouse leaves, revert selection to just the start cell if no second click yet\n      const startCoords = { \n        minRow: blockSelectionStartCell.rowIndex, maxRow: blockSelectionStartCell.rowIndex, \n        minCol: blockSelectionStartCell.colIndex, maxCol: blockSelectionStartCell.colIndex \n      };\n      setCurrentSelectedBlockCoords(startCoords);\n      updateSelectedValuesFromCoords(startCoords);\n      setBlockSelectionHoverCell(null);\n    }\n  };\n  \n  const isCellActive = (rowIndex: number, colIndex: number): boolean => {\n    if (!isKeyboardSelectionMode) return false;\n\n    if (keyboardCellSelectionMethod === 'single') {\n      return selectedCellValuesForKeyboard.includes(String(displayData[rowIndex][colIndex]));\n    } else { // Block mode\n      if (!currentSelectedBlockCoords) return false;\n      return rowIndex >= currentSelectedBlockCoords.minRow && rowIndex <= currentSelectedBlockCoords.maxRow &&\n             colIndex >= currentSelectedBlockCoords.minCol && colIndex <= currentSelectedBlockCoords.maxCol;\n    }\n  };\n\n  const confirmKeyboardCells = () => {\n    if (selectedCellValuesForKeyboard.length === 0) {\n      toast({ title: \"No cells selected\", description: \"Please select at least one cell for the keyboard.\", variant: \"destructive\" });\n      return;\n    }\n    onCellsSelectForKeyboard(selectedCellValuesForKeyboard);\n    setIsKeyboardSelectionMode(false); // This will also trigger resets due to toggleKeyboardSelectionMode logic\n    toast({ title: \"Keyboard Generated\", description: `${selectedCellValuesForKeyboard.length} cells set for keyboard.` });\n  };\n\n  if (rawData.length === 0) {\n    return <p className=\"text-muted-foreground\">No data to display. Upload a spreadsheet.</p>;\n  }\n  \n  let instructionText = \"\";\n  if (isKeyboardSelectionMode) {\n    if (keyboardCellSelectionMethod === 'single') {\n      instructionText = `Single Cell Mode: Click on cells to add/remove them for the keyboard. Selected: ${selectedCellValuesForKeyboard.length}`;\n    } else { // block mode\n      if (!blockSelectionStartCell) {\n        instructionText = `Block Mode: Click a cell to mark the start of your block selection. Selected: ${selectedCellValuesForKeyboard.length}`;\n      } else {\n        instructionText = `Block Mode: Hover over cells and click another cell to mark the end of your block. Selected: ${selectedCellValuesForKeyboard.length}`;\n      }\n    }\n  }\n\n  return (\n    <div className=\"space-y-6 w-full\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4 p-4 border rounded-lg shadow\">\n        <h2 className=\"text-xl font-semibold text-foreground\">Spreadsheet Data</h2>\n        <div className=\"flex gap-2 flex-wrap\">\n          <Button onClick={toggleKeyboardSelectionMode} variant={isKeyboardSelectionMode ? \"default\" : \"outline\"} size=\"sm\">\n            <Grid className=\"mr-2 h-4 w-4\" />\n            {isKeyboardSelectionMode ? \"Cancel Cell Selection\" : \"Select Cells for Keyboard\"}\n          </Button>\n          {isKeyboardSelectionMode && (\n            <Button onClick={confirmKeyboardCells} size=\"sm\">\n              <CheckSquare className=\"mr-2 h-4 w-4\" />\n              Use Selected Cells\n            </Button>\n          )}\n        </div>\n      </div>\n      \n      {isKeyboardSelectionMode && (\n        <div className=\"space-y-3 p-3 bg-primary/5 rounded-md\">\n          <RadioGroup\n            value={keyboardCellSelectionMethod}\n            onValueChange={(value: string) => setKeyboardCellSelectionMethod(value as CellSelectionMethod)}\n            className=\"flex space-x-4\"\n          >\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"block\" id=\"block-select\" />\n              <Label htmlFor=\"block-select\">Block Select</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"single\" id=\"single-select\" />\n              <Label htmlFor=\"single-select\">Single Cell Select</Label>\n            </div>\n          </RadioGroup>\n          <p className=\"text-sm text-primary\">{instructionText}</p>\n        </div>\n      )}\n\n      <ScrollArea className=\"h-[400px] w-full border rounded-md shadow-inner\">\n        <Table className=\"min-w-full\">\n          <TableHeader className=\"sticky top-0 bg-card z-10\">\n            <TableRow>\n              {headers.map((header, index) => (\n                <TableHead key={index} className=\"font-semibold whitespace-nowrap\">{header}</TableHead>\n              ))}\n              {!isKeyboardSelectionMode && <TableHead className=\"w-40 text-right whitespace-nowrap\">Actions</TableHead>}\n            </TableRow>\n          </TableHeader>\n          <TableBody onMouseLeave={keyboardCellSelectionMethod === 'block' ? handleCellMouseLeave : undefined}>\n            {displayData.map((row, rowIndex) => (\n              <TableRow \n                key={rowIndex} \n                className={isKeyboardSelectionMode ? \"cursor-pointer\" : \"\"}\n              >\n                {row.map((cell, cellIndex) => (\n                  <TableCell \n                    key={cellIndex} \n                    onClick={() => handleCellClick(rowIndex, cellIndex)}\n                    onMouseEnter={() => handleCellMouseEnter(rowIndex, cellIndex)}\n                    className={`\n                      whitespace-nowrap\n                      ${isCellActive(rowIndex, cellIndex) ? 'bg-primary/20 ring-2 ring-primary' : ''}\n                      ${isKeyboardSelectionMode ? 'hover:bg-accent/10' : ''}\n                    `}\n                  >\n                    {String(cell)}\n                  </TableCell>\n                ))}\n                {!isKeyboardSelectionMode && (\n                  <TableCell className=\"text-right\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => onRowSelectForForm(parsedData[rowIndex])} // parsedData is 0-indexed for data rows\n                      aria-label={`Use row ${rowIndex + 1} to fill form`}\n                      className=\"text-xs\"\n                    >\n                      <Rows className=\"mr-1 h-3 w-3\" /> Fill Form\n                    </Button>\n                  </TableCell>\n                )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        {rawData.length > MAX_DISPLAY_ROWS + 1 && (\n          <p className=\"p-4 text-sm text-muted-foreground\">Displaying first {MAX_DISPLAY_ROWS} data rows. Full sheet processed.</p>\n        )}\n      </ScrollArea>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1074, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/DemoForm.tsx"],"sourcesContent":["\"use client\";\n\nimport type { Dispatch, SetStateAction } from 'react';\nimport { useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { ListChecks } from 'lucide-react';\nimport type { SpreadsheetRowObject } from '@/types';\n\ninterface DemoFormProps {\n  formData: SpreadsheetRowObject | null;\n  setFormData: Dispatch<SetStateAction<SpreadsheetRowObject | null>>;\n}\n\ninterface FormFields {\n  name: string;\n  email: string;\n  phone: string;\n  address: string;\n}\n\nconst initialFormFields: FormFields = { name: '', email: '', phone: '', address: '' };\n\nexport function DemoForm({ formData, setFormData }: DemoFormProps) {\n\n  const formValues: FormFields = {\n    name: String(formData?.['Name'] || formData?.['name'] || initialFormFields.name),\n    email: String(formData?.['Email'] || formData?.['email'] || initialFormFields.email),\n    phone: String(formData?.['Phone'] || formData?.['phone'] || formData?.['Number'] || formData?.['number'] || initialFormFields.phone),\n    address: String(formData?.['Address'] || formData?.['address'] || initialFormFields.address),\n  };\n  \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    // This component doesn't manage form state directly, it just displays.\n    // For a real form, you'd update a local state here.\n    // For now, we'll just log it or if we want to enable editing, we would update `formData` prop which is complex.\n    // This is just for display and auto-fill demo.\n    console.log(`Field ${name} changed to ${value}`);\n  };\n\n  const clearForm = () => {\n    setFormData(null);\n  };\n\n  return (\n    <Card className=\"w-full max-w-md shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-xl\">\n          <ListChecks className=\"h-6 w-6 text-primary\" />\n          Demo Form\n        </CardTitle>\n        <CardDescription>This form will be auto-filled when you select a row from the spreadsheet.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"name\">Name</Label>\n          <Input id=\"name\" name=\"name\" value={formValues.name} onChange={handleInputChange} placeholder=\"Enter name\" />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email</Label>\n          <Input id=\"email\" name=\"email\" type=\"email\" value={formValues.email} onChange={handleInputChange} placeholder=\"Enter email\" />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"phone\">Phone Number</Label>\n          <Input id=\"phone\" name=\"phone\" type=\"tel\" value={formValues.phone} onChange={handleInputChange} placeholder=\"Enter phone number\" />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"address\">Address</Label>\n          <Input id=\"address\" name=\"address\" value={formValues.address} onChange={handleInputChange} placeholder=\"Enter address\" />\n        </div>\n        <Button onClick={clearForm} variant=\"outline\" className=\"w-full\">\n          Clear Form\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AARA;;;;;;;AAuBA,MAAM,oBAAgC;IAAE,MAAM;IAAI,OAAO;IAAI,OAAO;IAAI,SAAS;AAAG;AAE7E,SAAS,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAiB;IAE/D,MAAM,aAAyB;QAC7B,MAAM,OAAO,UAAU,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,IAAI,kBAAkB,IAAI;QAC/E,OAAO,OAAO,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,IAAI,kBAAkB,KAAK;QACnF,OAAO,OAAO,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,IAAI,kBAAkB,KAAK;QACnI,SAAS,OAAO,UAAU,CAAC,UAAU,IAAI,UAAU,CAAC,UAAU,IAAI,kBAAkB,OAAO;IAC7F;IAEA,MAAM,oBAAoB,CAAC;QACzB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM;QAChC,uEAAuE;QACvE,oDAAoD;QACpD,gHAAgH;QAChH,+CAA+C;QAC/C,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,YAAY,EAAE,OAAO;IACjD;IAEA,MAAM,YAAY;QAChB,YAAY;IACd;IAEA,qBACE,8OAAC,gIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,8OAAC,gIAAA,CAAA,aAAU;;kCACT,8OAAC,gIAAA,CAAA,YAAS;wBAAC,WAAU;;0CACnB,8OAAC,kNAAA,CAAA,aAAU;gCAAC,WAAU;;;;;;4BAAyB;;;;;;;kCAGjD,8OAAC,gIAAA,CAAA,kBAAe;kCAAC;;;;;;;;;;;;0BAEnB,8OAAC,gIAAA,CAAA,cAAW;gBAAC,WAAU;;kCACrB,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,iIAAA,CAAA,QAAK;gCAAC,SAAQ;0CAAO;;;;;;0CACtB,8OAAC,iIAAA,CAAA,QAAK;gCAAC,IAAG;gCAAO,MAAK;gCAAO,OAAO,WAAW,IAAI;gCAAE,UAAU;gCAAmB,aAAY;;;;;;;;;;;;kCAEhG,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,iIAAA,CAAA,QAAK;gCAAC,SAAQ;0CAAQ;;;;;;0CACvB,8OAAC,iIAAA,CAAA,QAAK;gCAAC,IAAG;gCAAQ,MAAK;gCAAQ,MAAK;gCAAQ,OAAO,WAAW,KAAK;gCAAE,UAAU;gCAAmB,aAAY;;;;;;;;;;;;kCAEhH,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,iIAAA,CAAA,QAAK;gCAAC,SAAQ;0CAAQ;;;;;;0CACvB,8OAAC,iIAAA,CAAA,QAAK;gCAAC,IAAG;gCAAQ,MAAK;gCAAQ,MAAK;gCAAM,OAAO,WAAW,KAAK;gCAAE,UAAU;gCAAmB,aAAY;;;;;;;;;;;;kCAE9G,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,iIAAA,CAAA,QAAK;gCAAC,SAAQ;0CAAU;;;;;;0CACzB,8OAAC,iIAAA,CAAA,QAAK;gCAAC,IAAG;gCAAU,MAAK;gCAAU,OAAO,WAAW,OAAO;gCAAE,UAAU;gCAAmB,aAAY;;;;;;;;;;;;kCAEzG,8OAAC,kIAAA,CAAA,SAAM;wBAAC,SAAS;wBAAW,SAAQ;wBAAU,WAAU;kCAAS;;;;;;;;;;;;;;;;;;AAMzE","debugId":null}},
    {"offset": {"line": 1295, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/VirtualKeyboard.tsx"],"sourcesContent":["\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Keyboard as KeyboardIcon, Copy } from 'lucide-react';\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface VirtualKeyboardProps {\n  keys: string[];\n}\n\nexport function VirtualKeyboard({ keys }: VirtualKeyboardProps) {\n  const { toast } = useToast();\n\n  const handleKeyPress = async (key: string) => {\n    try {\n      await navigator.clipboard.writeText(key);\n      toast({\n        title: \"Copied to Clipboard\",\n        description: `\"${key}\" has been copied.`,\n      });\n    } catch (err) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Could not copy text to clipboard. Your browser might not support this feature or permissions are denied.\",\n        variant: \"destructive\",\n      });\n      console.error('Failed to copy: ', err);\n    }\n  };\n\n  if (keys.length === 0) {\n    return (\n      <Card className=\"w-full max-w-md shadow-lg\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-xl\">\n            <KeyboardIcon className=\"h-6 w-6 text-primary\" />\n            Custom Keyboard\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground text-center py-4\">Select cells from the spreadsheet to create your custom keyboard.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-2xl shadow-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-xl\">\n          <KeyboardIcon className=\"h-6 w-6 text-primary\" />\n          Custom Keyboard\n        </CardTitle>\n        <CardDescription>Click a key to copy its content to your clipboard.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"bg-card p-4 rounded-b-lg\">\n        <div className=\"grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-2\">\n          {keys.map((key, index) => (\n            <Button\n              key={index}\n              onClick={() => handleKeyPress(key)}\n              variant=\"secondary\"\n              className=\"h-16 text-sm font-medium text-foreground bg-background hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground active:bg-primary active:text-primary-foreground transition-all duration-100 ease-in-out transform active:scale-95 shadow-md overflow-hidden p-2\"\n              aria-label={`Copy ${key}`}\n            >\n              <span className=\"truncate block w-full text-center\">{key}</span>\n            </Button>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AALA;;;;;;AAWO,SAAS,gBAAgB,EAAE,IAAI,EAAwB;IAC5D,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IAEzB,MAAM,iBAAiB,OAAO;QAC5B,IAAI;YACF,MAAM,UAAU,SAAS,CAAC,SAAS,CAAC;YACpC,MAAM;gBACJ,OAAO;gBACP,aAAa,CAAC,CAAC,EAAE,IAAI,kBAAkB,CAAC;YAC1C;QACF,EAAE,OAAO,KAAK;YACZ,MAAM;gBACJ,OAAO;gBACP,aAAa;gBACb,SAAS;YACX;YACA,QAAQ,KAAK,CAAC,oBAAoB;QACpC;IACF;IAEA,IAAI,KAAK,MAAM,KAAK,GAAG;QACrB,qBACE,8OAAC,gIAAA,CAAA,OAAI;YAAC,WAAU;;8BACd,8OAAC,gIAAA,CAAA,aAAU;8BACT,cAAA,8OAAC,gIAAA,CAAA,YAAS;wBAAC,WAAU;;0CACnB,8OAAC,0MAAA,CAAA,WAAY;gCAAC,WAAU;;;;;;4BAAyB;;;;;;;;;;;;8BAIrD,8OAAC,gIAAA,CAAA,cAAW;8BACV,cAAA,8OAAC;wBAAE,WAAU;kCAAyC;;;;;;;;;;;;;;;;;IAI9D;IAEA,qBACE,8OAAC,gIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,8OAAC,gIAAA,CAAA,aAAU;;kCACT,8OAAC,gIAAA,CAAA,YAAS;wBAAC,WAAU;;0CACnB,8OAAC,0MAAA,CAAA,WAAY;gCAAC,WAAU;;;;;;4BAAyB;;;;;;;kCAGnD,8OAAC,gIAAA,CAAA,kBAAe;kCAAC;;;;;;;;;;;;0BAEnB,8OAAC,gIAAA,CAAA,cAAW;gBAAC,WAAU;0BACrB,cAAA,8OAAC;oBAAI,WAAU;8BACZ,KAAK,GAAG,CAAC,CAAC,KAAK,sBACd,8OAAC,kIAAA,CAAA,SAAM;4BAEL,SAAS,IAAM,eAAe;4BAC9B,SAAQ;4BACR,WAAU;4BACV,cAAY,CAAC,KAAK,EAAE,KAAK;sCAEzB,cAAA,8OAAC;gCAAK,WAAU;0CAAqC;;;;;;2BANhD;;;;;;;;;;;;;;;;;;;;;AAanB","debugId":null}},
    {"offset": {"line": 1455, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI/B,CACE,EAAE,SAAS,EAAE,cAAc,YAAY,EAAE,aAAa,IAAI,EAAE,GAAG,OAAO,EACtE,oBAEA,8OAAC,qKAAA,CAAA,OAAuB;QACtB,KAAK;QACL,YAAY;QACZ,aAAa;QACb,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sBACA,gBAAgB,eAAe,mBAAmB,kBAClD;QAED,GAAG,KAAK;;;;;;AAIf,UAAU,WAAW,GAAG,qKAAA,CAAA,OAAuB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1486, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from 'react';\nimport { FileUpload } from '@/components/FileUpload';\nimport { SpreadsheetDisplay } from '@/components/SpreadsheetDisplay';\nimport { DemoForm } from '@/components/DemoForm';\nimport { VirtualKeyboard } from '@/components/VirtualKeyboard';\nimport { Separator } from '@/components/ui/separator';\nimport type { RawSpreadsheetData, ParsedSpreadsheetData, SpreadsheetRowObject } from '@/types';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { AlertCircle, FileSpreadsheet, Edit3, Type } from 'lucide-react';\n\ninterface SpreadsheetFileData {\n  rawData: RawSpreadsheetData;\n  parsedData: ParsedSpreadsheetData;\n  headers: string[];\n}\n\nexport default function Home() {\n  const [spreadsheetFile, setSpreadsheetFile] = useState<SpreadsheetFileData | null>(null);\n  const [formData, setFormData] = useState<SpreadsheetRowObject | null>(null);\n  const [keyboardKeys, setKeyboardKeys] = useState<string[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleFileProcessed = (data: SpreadsheetFileData) => {\n    setSpreadsheetFile(data);\n    setFormData(null); // Clear form when new file is processed\n    setKeyboardKeys([]); // Clear keyboard when new file is processed\n  };\n\n  const handleRowSelectForForm = (rowData: SpreadsheetRowObject) => {\n    setFormData(rowData);\n  };\n\n  const handleCellsSelectForKeyboard = (cells: string[]) => {\n    setKeyboardKeys(cells);\n  };\n\n  return (\n    <div className=\"container mx-auto py-8 px-4 space-y-12\">\n      <section id=\"upload-section\" className=\"flex flex-col items-center space-y-6\">\n        <div className=\"text-center max-w-2xl\">\n            <h2 className=\"text-3xl font-bold tracking-tight text-foreground sm:text-4xl\">Link Your Sheets, Simplify Your Input</h2>\n            <p className=\"mt-4 text-lg leading-8 text-muted-foreground\">\n              Upload your CSV or Excel files to instantly populate forms or create a custom on-screen keyboard from your data.\n            </p>\n        </div>\n        <FileUpload onFileProcessed={handleFileProcessed} isLoading={isLoading} setIsLoading={setIsLoading} />\n      </section>\n\n      {isLoading && (\n        <div className=\"flex justify-center items-center p-8\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n          <p className=\"ml-4 text-lg text-muted-foreground\">Processing your spreadsheet...</p>\n        </div>\n      )}\n\n      {!isLoading && spreadsheetFile && (\n        <>\n          <Separator />\n          <section id=\"data-display-section\" className=\"space-y-6\">\n             <Card className=\"bg-transparent border-none shadow-none\">\n              <CardHeader className=\"text-center\">\n                <FileSpreadsheet className=\"mx-auto h-12 w-12 text-primary\" />\n                <CardTitle className=\"text-2xl font-semibold\">Your Spreadsheet Data</CardTitle>\n                <CardDescription>\n                  View your data below. Select a row to fill the demo form, or select cells to generate a custom keyboard.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <SpreadsheetDisplay\n                  rawData={spreadsheetFile.rawData}\n                  parsedData={spreadsheetFile.parsedData}\n                  headers={spreadsheetFile.headers}\n                  onRowSelectForForm={handleRowSelectForForm}\n                  onCellsSelectForKeyboard={handleCellsSelectForKeyboard}\n                />\n              </CardContent>\n            </Card>\n          </section>\n\n          <Separator />\n\n          <section id=\"features-section\" className=\"grid md:grid-cols-2 gap-8 items-start\">\n            <div className=\"space-y-6\">\n              <Card className=\"bg-transparent border-none shadow-none\">\n                <CardHeader className=\"text-center\">\n                  <Edit3 className=\"mx-auto h-12 w-12 text-primary\" />\n                  <CardTitle className=\"text-2xl font-semibold\">Auto-Fill Demo Form</CardTitle>\n                  <CardDescription>\n                    Select a row in the table above to see its data populate this form.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"flex justify-center\">\n                  <DemoForm formData={formData} setFormData={setFormData} />\n                </CardContent>\n              </Card>\n            </div>\n            \n            <div className=\"space-y-6\">\n              <Card className=\"bg-transparent border-none shadow-none\">\n                <CardHeader className=\"text-center\">\n                  <Type className=\"mx-auto h-12 w-12 text-primary\" />\n                  <CardTitle className=\"text-2xl font-semibold\">Custom On-Screen Keyboard</CardTitle>\n                  <CardDescription>\n                    Use the \"Select Cells for Keyboard\" option above. Selected cell values will appear here as clickable keys.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"flex justify-center\">\n                  <VirtualKeyboard keys={keyboardKeys} />\n                </CardContent>\n              </Card>\n            </div>\n          </section>\n        </>\n      )}\n\n      {!isLoading && !spreadsheetFile && (\n         <Card className=\"mt-8 border-dashed border-2\">\n            <CardContent className=\"p-8 text-center\">\n              <AlertCircle className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-xl font-semibold text-muted-foreground\">No Spreadsheet Loaded</h3>\n              <p className=\"text-muted-foreground mt-2\">\n                Upload a CSV or Excel file to get started. Once loaded, your data will appear here,\n                allowing you to interact with the form-filling and custom keyboard features.\n              </p>\n            </CardContent>\n          </Card>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAVA;;;;;;;;;;AAkBe,SAAS;IACtB,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAA8B;IACnF,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAA+B;IACtE,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAC7D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,MAAM,sBAAsB,CAAC;QAC3B,mBAAmB;QACnB,YAAY,OAAO,wCAAwC;QAC3D,gBAAgB,EAAE,GAAG,4CAA4C;IACnE;IAEA,MAAM,yBAAyB,CAAC;QAC9B,YAAY;IACd;IAEA,MAAM,+BAA+B,CAAC;QACpC,gBAAgB;IAClB;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAQ,IAAG;gBAAiB,WAAU;;kCACrC,8OAAC;wBAAI,WAAU;;0CACX,8OAAC;gCAAG,WAAU;0CAAgE;;;;;;0CAC9E,8OAAC;gCAAE,WAAU;0CAA+C;;;;;;;;;;;;kCAIhE,8OAAC,gIAAA,CAAA,aAAU;wBAAC,iBAAiB;wBAAqB,WAAW;wBAAW,cAAc;;;;;;;;;;;;YAGvF,2BACC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;;;;;kCACf,8OAAC;wBAAE,WAAU;kCAAqC;;;;;;;;;;;;YAIrD,CAAC,aAAa,iCACb;;kCACE,8OAAC,qIAAA,CAAA,YAAS;;;;;kCACV,8OAAC;wBAAQ,IAAG;wBAAuB,WAAU;kCAC1C,cAAA,8OAAC,gIAAA,CAAA,OAAI;4BAAC,WAAU;;8CACf,8OAAC,gIAAA,CAAA,aAAU;oCAAC,WAAU;;sDACpB,8OAAC,4NAAA,CAAA,kBAAe;4CAAC,WAAU;;;;;;sDAC3B,8OAAC,gIAAA,CAAA,YAAS;4CAAC,WAAU;sDAAyB;;;;;;sDAC9C,8OAAC,gIAAA,CAAA,kBAAe;sDAAC;;;;;;;;;;;;8CAInB,8OAAC,gIAAA,CAAA,cAAW;8CACV,cAAA,8OAAC,wIAAA,CAAA,qBAAkB;wCACjB,SAAS,gBAAgB,OAAO;wCAChC,YAAY,gBAAgB,UAAU;wCACtC,SAAS,gBAAgB,OAAO;wCAChC,oBAAoB;wCACpB,0BAA0B;;;;;;;;;;;;;;;;;;;;;;kCAMlC,8OAAC,qIAAA,CAAA,YAAS;;;;;kCAEV,8OAAC;wBAAQ,IAAG;wBAAmB,WAAU;;0CACvC,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC,gIAAA,CAAA,OAAI;oCAAC,WAAU;;sDACd,8OAAC,gIAAA,CAAA,aAAU;4CAAC,WAAU;;8DACpB,8OAAC,0MAAA,CAAA,QAAK;oDAAC,WAAU;;;;;;8DACjB,8OAAC,gIAAA,CAAA,YAAS;oDAAC,WAAU;8DAAyB;;;;;;8DAC9C,8OAAC,gIAAA,CAAA,kBAAe;8DAAC;;;;;;;;;;;;sDAInB,8OAAC,gIAAA,CAAA,cAAW;4CAAC,WAAU;sDACrB,cAAA,8OAAC,8HAAA,CAAA,WAAQ;gDAAC,UAAU;gDAAU,aAAa;;;;;;;;;;;;;;;;;;;;;;0CAKjD,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC,gIAAA,CAAA,OAAI;oCAAC,WAAU;;sDACd,8OAAC,gIAAA,CAAA,aAAU;4CAAC,WAAU;;8DACpB,8OAAC,kMAAA,CAAA,OAAI;oDAAC,WAAU;;;;;;8DAChB,8OAAC,gIAAA,CAAA,YAAS;oDAAC,WAAU;8DAAyB;;;;;;8DAC9C,8OAAC,gIAAA,CAAA,kBAAe;8DAAC;;;;;;;;;;;;sDAInB,8OAAC,gIAAA,CAAA,cAAW;4CAAC,WAAU;sDACrB,cAAA,8OAAC,qIAAA,CAAA,kBAAe;gDAAC,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAQlC,CAAC,aAAa,CAAC,iCACb,8OAAC,gIAAA,CAAA,OAAI;gBAAC,WAAU;0BACb,cAAA,8OAAC,gIAAA,CAAA,cAAW;oBAAC,WAAU;;sCACrB,8OAAC,oNAAA,CAAA,cAAW;4BAAC,WAAU;;;;;;sCACvB,8OAAC;4BAAG,WAAU;sCAA8C;;;;;;sCAC5D,8OAAC;4BAAE,WAAU;sCAA6B;;;;;;;;;;;;;;;;;;;;;;;AASxD","debugId":null}}]
}