{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/spreadsheet-parser.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\nimport type { RawSpreadsheetData, ParsedSpreadsheetData, SpreadsheetRowObject } from '@/types';\n\nexport const parseSpreadsheetFile = (file: File): Promise<{ rawData: RawSpreadsheetData, parsedData: ParsedSpreadsheetData, headers: string[] }> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      try {\n        const arrayBuffer = event.target?.result;\n        if (!arrayBuffer) {\n          reject(new Error(\"Failed to read file.\"));\n          return;\n        }\n\n        const workbook = XLSX.read(arrayBuffer, { type: 'array' });\n        const firstSheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[firstSheetName];\n        \n        // For rawData (array of arrays)\n        const rawData: RawSpreadsheetData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: \"\" }) as RawSpreadsheetData;\n        \n        // For parsedData (array of objects) and headers\n        const jsonData: Record<string, any>[] = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\n        \n        let headers: string[] = [];\n        if (rawData.length > 0) {\n          headers = rawData[0].map(String); // First row as headers\n        } else if (jsonData.length > 0) {\n          headers = Object.keys(jsonData[0]);\n        }\n\n        const parsedData: ParsedSpreadsheetData = jsonData.map(row => {\n          const newRow: SpreadsheetRowObject = {};\n          for (const header of headers) {\n            newRow[header] = row[header] !== undefined ? row[header] : \"\";\n          }\n          return newRow;\n        });\n\n        resolve({ rawData, parsedData, headers });\n      } catch (error) {\n        console.error(\"Error parsing spreadsheet:\", error);\n        reject(new Error(\"Error parsing spreadsheet file. Please ensure it's a valid CSV or XLSX file.\"));\n      }\n    };\n\n    reader.onerror = (error) => {\n      console.error(\"FileReader error:\", error);\n      reject(new Error(\"Error reading file.\"));\n    };\n\n    if (file.name.endsWith('.csv') || file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {\n      reader.readAsArrayBuffer(file);\n    } else {\n      reject(new Error(\"Unsupported file type. Please upload a CSV or XLSX file.\"));\n    }\n  });\n};\n"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM,uBAAuB,CAAC;IACnC,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,SAAS,IAAI;QAEnB,OAAO,MAAM,GAAG,CAAC;YACf,IAAI;gBACF,MAAM,cAAc,MAAM,MAAM,EAAE;gBAClC,IAAI,CAAC,aAAa;oBAChB,OAAO,IAAI,MAAM;oBACjB;gBACF;gBAEA,MAAM,WAAW,CAAA,GAAA,gIAAA,CAAA,OAAS,AAAD,EAAE,aAAa;oBAAE,MAAM;gBAAQ;gBACxD,MAAM,iBAAiB,SAAS,UAAU,CAAC,EAAE;gBAC7C,MAAM,YAAY,SAAS,MAAM,CAAC,eAAe;gBAEjD,gCAAgC;gBAChC,MAAM,UAA8B,gIAAA,CAAA,QAAU,CAAC,aAAa,CAAC,WAAW;oBAAE,QAAQ;oBAAG,QAAQ;gBAAG;gBAEhG,gDAAgD;gBAChD,MAAM,WAAkC,gIAAA,CAAA,QAAU,CAAC,aAAa,CAAC,WAAW;oBAAE,QAAQ;gBAAG;gBAEzF,IAAI,UAAoB,EAAE;gBAC1B,IAAI,QAAQ,MAAM,GAAG,GAAG;oBACtB,UAAU,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,uBAAuB;gBAC3D,OAAO,IAAI,SAAS,MAAM,GAAG,GAAG;oBAC9B,UAAU,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACnC;gBAEA,MAAM,aAAoC,SAAS,GAAG,CAAC,CAAA;oBACrD,MAAM,SAA+B,CAAC;oBACtC,KAAK,MAAM,UAAU,QAAS;wBAC5B,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,KAAK,YAAY,GAAG,CAAC,OAAO,GAAG;oBAC7D;oBACA,OAAO;gBACT;gBAEA,QAAQ;oBAAE;oBAAS;oBAAY;gBAAQ;YACzC,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,8BAA8B;gBAC5C,OAAO,IAAI,MAAM;YACnB;QACF;QAEA,OAAO,OAAO,GAAG,CAAC;YAChB,QAAQ,KAAK,CAAC,qBAAqB;YACnC,OAAO,IAAI,MAAM;QACnB;QAEA,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,WAAW,KAAK,IAAI,CAAC,QAAQ,CAAC,YAAY,KAAK,IAAI,CAAC,QAAQ,CAAC,SAAS;YAC3F,OAAO,iBAAiB,CAAC;QAC3B,OAAO;YACL,OAAO,IAAI,MAAM;QACnB;IACF;AACF","debugId":null}}]
}